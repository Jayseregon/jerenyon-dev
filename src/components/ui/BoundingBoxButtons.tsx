import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";

// Define the props for the BoundingBox component
interface BoundingBoxProps {
  pathLengthRange: [number, number]; // Range for the length of each path segment
}

// BoundingBox component
const BoundingBox: React.FC<BoundingBoxProps> = ({ pathLengthRange }) => {
  const [pathData, setPathData] = useState(""); // State to store the generated SVG path data

  useEffect(() => {
    // Function to generate a random path within the bounding box
    const generatePath = () => {
      // Get the dimensions of the bounding box
      const width = document.querySelector(".bounding-box")?.clientWidth || 0;
      const height = document.querySelector(".bounding-box")?.clientHeight || 0;
      const centerX = width / 2;
      const centerY = height / 2;
      let currentX = centerX;
      let currentY = centerY;
      let path = `M ${centerX} ${centerY}`; // Start the path at the center of the bounding box

      // Define possible directions for the path to move
      const directions = [
        [1, 0], // right
        [0, 1], // down
        [-1, 0], // left
        [0, -1], // up
      ];
      let currentDirectionIndex = Math.floor(Math.random() * 4); // Randomly choose an initial direction
      let previousTurn = 0; // 1 for right turn, -1 for left turn

      // Generate the path by moving in random directions
      while (
        currentX > 0 &&
        currentX < width &&
        currentY > 0 &&
        currentY < height
      ) {
        const [dx, dy] = directions[currentDirectionIndex];
        const length =
          Math.random() * (pathLengthRange[1] - pathLengthRange[0]) +
          pathLengthRange[0]; // Random length for the current segment

        currentX += dx * length;
        currentY += dy * length;
        path += ` L ${currentX} ${currentY}`; // Add the new segment to the path

        // Change direction to the opposite of the previous turn
        const turn = previousTurn === 1 ? -1 : 1;

        currentDirectionIndex = (currentDirectionIndex + turn + 4) % 4;
        previousTurn = turn;
      }

      return path; // Return the generated path
    };

    setPathData(generatePath()); // Generate the path and set it in the state
  }, [pathLengthRange]); // Re-run the effect if pathLengthRange changes

  return (
    // Container for the bounding box with full width and height
    <div className="bounding-box w-full h-full border-2">
      {/* SVG element to render the path */}
      <svg className="w-full h-full">
        <motion.path
          animate={{ pathLength: 1 }} // Final state for the animation
          d={pathData} // Path data generated by the useEffect
          fill="none"
          initial={{ pathLength: 0 }} // Initial state for the animation
          stroke="#fef08a" // Stroke color
          strokeWidth="2" // Stroke width
          transition={{ duration: 2 }} // Animation duration
        />
      </svg>
    </div>
  );
};

export default BoundingBox;
